[{"path":[]},{"path":"/articles/Tutorial.html","id":"section-access-unit","dir":"Articles","previous_headings":"rAccess terminology","what":"1. Access Unit","title":"Tutorial","text":"smallest unit want control access . specific module app, single UI element, collection UI elements, etc.","code":""},{"path":"/articles/Tutorial.html","id":"section-access-panel","dir":"Articles","previous_headings":"rAccess terminology","what":"2. Access Panel","title":"Tutorial","text":"container collection Access Units. can used implement deep layers access control.","code":""},{"path":"/articles/Tutorial.html","id":"section-roles-and-responibilities","dir":"Articles","previous_headings":"","what":"Roles and responibilities","title":"Tutorial","text":"App Developer App Admin App Publisher App Developer responsible find App Admin provide Access units panels.App Developer configure rAccess accordingly implement controlling logic app.App Publisher work App Developer deploy app correct configuration add identified App Admin rAccess interface.App Admin responsible manage users assignments rAccess interface.","code":""},{"path":"/articles/Tutorial.html","id":"section-workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Tutorial","text":"use rAccess security model, three distinct sets actions carried different roles. Design phase : App developer identify Access Panels number Access Units within Access Panel. Development phase : App developer lists Access Panels Access units config Yaml file. App developer implement required server side controlling logic. Publishing phase : App publisher publish app sharing settings : users - login required App publisher assign identified App Admin admin deployed app, using rAccess interface. Post-deployment : App admin controls maintains access lists within app. nice shiny GUI provided facilitate . Audit trails available Access lists applications utilize rAccess past versions Access lists per application available particular application, one can obtain effective access lists certain time history (e.g. effective access list application 10:52 10 April 2022.","code":""},{"path":"/articles/Tutorial.html","id":"section-implementation","dir":"Articles","previous_headings":"","what":"Implementation","title":"Tutorial","text":"rAccess package includes ui server module access control tab: module_iam_ui() module_iam_server() plugged ui server main application. module_iam_server() takes arguments: id - Module id rAccess_obj - instance R6 class object rAccess access panels access units identified, developer can create new instance R6 object rAccess. parameters rAccess object can either passed directly arguments new instance rAccess defined within configuration yaml file.","code":""},{"path":"/articles/Tutorial.html","id":"section-adding-raccess-config-file","dir":"Articles","previous_headings":"Implementation","what":"Adding rAccess config file","title":"Tutorial","text":"add config file template project directory use:","code":"rAccess::use_config(file_name = \"rAccess.yml\")"},{"path":"/articles/Tutorial.html","id":"section-config-file-structure","dir":"Articles","previous_headings":"","what":"Config file structure","title":"Tutorial","text":"","code":"module: rAccess parameters:   app_name:                 # application name *   board_type:               # local/rconnect/s3 *      access_mode:              # default/single unit   unit_display:             # dropdown/switch   switch_size:              # default/mini/small/normal/large   user_df: !expr tibble::tribble(               ~userid, ~username,     \"UserID\", \"User Name\")        # Sample user_df   use_rconnect_users: TRUE        # TRUE - combine rconnect userlist with user_df   secure_mode: FALSE              # TRUE - Access will be denied to users with no access to atleast one panel/unit   local_board_path:               # Path to save local pin_board when board_type = \"local\"       s3_bucket:                      # s3 bucket name when board_type = \"s3\"         s3_access_key:                  # s3 access key when board_type = \"s3\"    s3_secret_key:                  # s3 secret key when board_type = \"s3\"    verbose: FALSE                  # If TRUE Prints all changes in the log  data:                             # Study data path if available     datapath1:        datapath2:   panel_str:                        # Panel structure to be defined by the developer   - access_panel: ADMIN           # Every App should have an ADMIN panel.(mandatory)    - access_panel:                 # Access Panel name *     access_units:       - unit:                     # Access unit name  *       - unit:                     # Access unit name    - access_panel:                 # Access Panel name *     access_units:       - unit:         data:                     # datapath associated with access unit         - unit:                              data:                     # datapath associated with access unit"},{"path":"/articles/Tutorial.html","id":"section-parameters","dir":"Articles","previous_headings":"Config file structure","what":"Parameters","title":"Tutorial","text":"app_name Application Name. used pin_name. board_type Takes values: \"local\" local pin board. \"s3\" using s3 bucket save pin board. \"rconnect\" rconnect pin board. Pin_board created using pins package store access data. local folder running app interactively. deployed connect servers, S3 bucket rsconnect pin_board must used. access_mode - Enables user select access modes. Available access modes : default - Allows access multiple access panels multiple access units single unit - Allows access single access unit within access panel. unit_display - Defines display type access units ui. Takes values : ‘switch’, ‘dropdown’. defaults toggle switches. switch_size - Defines size toggle switches used access control ui. takes values : ‘default’, ‘mini’, ‘small’, ‘normal’, ‘large’. user_df - data frame userid username NULL. user_df provided, access module search potential users within given data frame interactive mode. use_rconnect_users Takes TRUE/FALSE. TRUE rconnect user list combined user_df. affect deployed apps Posit Connect servers. safe_mode Takes TRUE/FALSE TRUE access app denied users access least one panel/unit. local_board_path - Path local folder save pin board board_type = “local”. Local pin_boards mainly useful app running interactively, can also deploy app option. However, lose saved access lists re-deploy app. default local path data folder root directory. s3_bucket, s3_access_key, s3_secret_key - S3 bucket credentials used board_type = “s3”. verbose TRUE Prints data base changes log. used debugging.","code":"user_df <- tibble::tribble(   ~userid, username,   \"UserId1\", \"User Name 1\",   \"UserId2\", \"User Name 2\",   \"UserId3\", \"User Name 3\",   \"UserId4\", \"User Name 4\",   \"UserId5\", \"User Name 5\" )"},{"path":"/articles/Tutorial.html","id":"section-data","dir":"Articles","previous_headings":"Config file structure","what":"data","title":"Tutorial","text":"study data path associated access units () added section dathapath1, datapath2, … datapaths displayed anywhere access control UI saved part panel structure developers can access using panel_config. e.g. newIAM$panel_config","code":"data:    datapath1: \"testpath/data/path1\"   datapath2: \"testpath/data/path2\""},{"path":"/articles/Tutorial.html","id":"section-panel-structure","dir":"Articles","previous_headings":"Config file structure","what":"Panel Structure","title":"Tutorial","text":"panel structure access panel maintained given sample config file. Every access control module must ‘ADMIN’ panel units. defined panel_str : access panels follow structure: multiple datapaths associated access unit , defined :","code":"panel_str:   - access_panel: ADMIN - access_panel: \"Access Panel 1\"      access_units:       - unit: \"Unit 1\"         data: datapath1       - unit: \"Unit 2\"         data: datapath2 - access_panel: \"Access Panel 1\"      access_units:       - unit: \"Unit 1\"         data: !expr c('datapath1', ''datapath2`)"},{"path":"/articles/Tutorial.html","id":"section-creating-a-new-instance-of-raccess-with-config-file","dir":"Articles","previous_headings":"Config file structure","what":"Creating a new instance of rAccess with Config file","title":"Tutorial","text":"configuration file ready user can create new instance rAccess : deploying apps, always use session$user user ensure app recognizes currently logged .","code":"newIAM <- rAccess$new(user = \"UserID\", config = \"rAccess.yml\")"},{"path":"/articles/Tutorial.html","id":"section-demo","dir":"Articles","previous_headings":"","what":"Demo","title":"Tutorial","text":"demo_app.R without rAccess demo_app.R rAccess Sample config file","code":"library(shiny)  ui <- function() {   navbarPage(     \"Demo!\",     tabPanel(       \"Plot\",       sidebarLayout(         sidebarPanel(           radioButtons(             \"plotType\", \"Plot type\",             c(\"Scatter\" = \"p\", \"Line\" = \"l\")           )         ),         mainPanel(           plotOutput(\"plot\")         )       )     ),     tabPanel(       \"Summary\",       verbatimTextOutput(\"summary\")     ),     navbarMenu(       \"More\",       tabPanel(         \"Table\",         DT::dataTableOutput(\"table\")       ),       tabPanel(         \"About\",         fluidRow(           column(             6,             h1(\"this is a sample app\")           )         )       )     )   ) }  server <- function(input, output, session) {   output$plot <- renderPlot({     plot(cars, type = input$plotType)   })    output$summary <- renderPrint({     summary(cars)   })    output$table <- DT::renderDataTable({     DT::datatable(cars)   }) }  shinyApp(ui, server) library(DT) #>  #> Attaching package: 'DT' #> The following objects are masked from 'package:shiny': #>  #>     dataTableOutput, renderDataTable library(pins) library(shiny) library(rAccess)  ui <- navbarPage(   id = \"mainpage\",   title = \"Demo!\",   tabPanel(     \"Plot\",     sidebarLayout(       sidebarPanel(         radioButtons(           \"plotType\", \"Plot type\",           c(\"Scatter\" = \"p\", \"Line\" = \"l\")         )       ),       mainPanel(         plotOutput(\"plot\")       )     )   ),   tabPanel(     \"Summary\",     verbatimTextOutput(\"summary\")   ),   navbarMenu(     \"More\",     tabPanel(       \"Table\",       DT::dataTableOutput(\"table\")     ),     tabPanel(       \"About\",       fluidRow(         column(           6,           h1(\"this is a sample app\")         )       )     )   ),   tabPanel(     \"Access Control\",     rAccess::module_iam_ui(\"iam\")   ) )  server <- function(input, output, session) {   # Add sample rAccess config file to the root directory   if (!file.exists(\"sample_rAccess.yml\")) {     rAccess::use_config(\"sample_rAccess.yml\")   }    # Create new instance of rAccess   user_id <- ifelse(!exists(\"session$user\"), \"UserID\", session$user)   newIAM <- rAccess$new(     user = user_id,     config = \"sample_rAccess.yml\"   )    if (newIAM$no_admin() || newIAM$is_admin()) {     showTab(\"mainpage\", target = \"Access Control\")   } else {     hideTab(\"mainpage\", target = \"Access Control\")   }    rAccess::module_iam_server(\"iam\", newIAM)    # Get panels with access   user_access_list <- newIAM$get_user_accesslist()    # Show/Hide: Access Control Panel   if (newIAM$no_admin() || newIAM$is_admin()) {     showTab(\"mainpage\", target = \"Access Control\")   } else {     hideTab(\"mainpage\", target = \"Access Control\")     print(\"YOU DO NOT HAVE ADMIN ACCESS\")   }    # Show/Hide: plot tab   if (!\"plot\" %in% user_access_list[[\"sum\"]]) {     hideTab(\"mainpage\", target = \"Plot\")   } else {     showTab(\"mainpage\", target = \"Plot\")   }    # Show/hide the Summary Tab   if (!\"summary\" %in% user_access_list[[\"sum\"]]) {     hideTab(\"mainpage\", target = \"Summary\")   } else {     showTab(\"mainpage\", target = \"Summary\")   }    # Show/hide the Table tab   if (!\"view\" %in% user_access_list[[\"data\"]]) {     hideTab(\"mainpage\", target = \"Table\")   } else {     showTab(\"mainpage\", target = \"Table\")   }    # ----------------------------------------------------------------------------    output$plot <- renderPlot({     plot(cars, type = input$plotType)   })    output$summary <- renderPrint({     summary(cars)   })    output$table <- DT::renderDataTable({     DT::datatable(cars)   }) }  shinyApp(ui, server) module: rAccess parameters:   app_name: demoApp                   board_type: local                     access_mode: default                unit_display: 'dropdown'         switch_size:    user_df: !expr tibble::tribble(                        ~userid, ~username,     \"UserID\", \"User Name 1\",     \"UserID2\", \"User Name 2\",   use_rconnect_users: TRUE           local_board_path:                      s3_bucket:                         s3_access_key:                     s3_secret_key:                     verbose: FALSE  data:   datapath1:        datapath2:   panel_str:                 - access_panel: ADMIN     - access_panel: sum     access_units:       - unit: plot        - unit: summary    - access_panel: data     access_units:       - unit: view"},{"path":"/articles/Tutorial.html","id":"section-audit-trail-functionalities","dir":"Articles","previous_headings":"","what":"Audit trail functionalities","title":"Tutorial","text":"rAccess package also offers additional functions performing audit trail activities. get_accesshistory() - Takes pin_board pin_name arguments returns list access data created different time points. get_accesslist() - Takes pin_board, pin_name, datemin datemax arguments returns access list given date specific time period. get_admins() - Takes pin_board, pin_name admin_panel arguments returns list admins. get_board() - Takes pin_board pin_name arguments gather pin_board elements.","code":"pin_board <- pins::board_folder(path = \"./data/\") get_accesshistory(pin_board, \"demo\") #> $`2023-06-29 08:44:20 Edited by NHarida1` #>   AccessPanel              UserName   UserID  plot summary  view ADMIN   sum #> 1       ADMIN Nandukrishnan Haridas NHarida1 FALSE   FALSE FALSE  TRUE  TRUE #> 2       ADMIN         Peyman Eshghi  PEshghi FALSE   FALSE FALSE  TRUE  TRUE #> 3        data Nandukrishnan Haridas NHarida1  TRUE   FALSE FALSE FALSE FALSE #> 4        data         Peyman Eshghi  PEshghi  TRUE   FALSE FALSE FALSE FALSE #> 5         sum         Peyman Eshghi  PEshghi  TRUE    TRUE FALSE FALSE FALSE #> 6         sum Nandukrishnan Haridas NHarida1  TRUE    TRUE FALSE FALSE FALSE #>    data #> 1  TRUE #> 2  TRUE #> 3 FALSE #> 4 FALSE #> 5 FALSE #> 6 FALSE get_accesslist(pin_board, \"demo\", datemin = \"2023-06-29\") #> $`2023-06-29 08:44:20` #>   AccessPanel              UserName   UserID  plot summary  view ADMIN   sum #> 1       ADMIN Nandukrishnan Haridas NHarida1 FALSE   FALSE FALSE  TRUE  TRUE #> 2       ADMIN         Peyman Eshghi  PEshghi FALSE   FALSE FALSE  TRUE  TRUE #> 3        data Nandukrishnan Haridas NHarida1  TRUE   FALSE FALSE FALSE FALSE #> 4        data         Peyman Eshghi  PEshghi  TRUE   FALSE FALSE FALSE FALSE #> 5         sum         Peyman Eshghi  PEshghi  TRUE    TRUE FALSE FALSE FALSE #> 6         sum Nandukrishnan Haridas NHarida1  TRUE    TRUE FALSE FALSE FALSE #>    data #> 1  TRUE #> 2  TRUE #> 3 FALSE #> 4 FALSE #> 5 FALSE #> 6 FALSE get_admins(pin_board, \"demo\", \"ADMIN\") #> NHarida1 - Nandukrishnan Haridas          PEshghi - Peyman Eshghi  #>                       \"NHarida1\"                        \"PEshghi\" get_board(pin_board, \"demo\") #> $access_panels #> [1] \"ADMIN\" \"data\"  \"sum\"   #>  #> $access_units #> [1] \"plot\"    \"summary\" \"view\"    #>  #> $access_df #>   AccessPanel              UserName   UserID  plot summary  view ADMIN   sum #> 1       ADMIN Nandukrishnan Haridas NHarida1 FALSE   FALSE FALSE  TRUE  TRUE #> 2       ADMIN         Peyman Eshghi  PEshghi FALSE   FALSE FALSE  TRUE  TRUE #> 3        data Nandukrishnan Haridas NHarida1  TRUE   FALSE FALSE FALSE FALSE #> 4        data         Peyman Eshghi  PEshghi  TRUE   FALSE FALSE FALSE FALSE #> 5         sum         Peyman Eshghi  PEshghi  TRUE    TRUE FALSE FALSE FALSE #> 6         sum Nandukrishnan Haridas NHarida1  TRUE    TRUE FALSE FALSE FALSE #>    data #> 1  TRUE #> 2  TRUE #> 3 FALSE #> 4 FALSE #> 5 FALSE #> 6 FALSE #>  #> $access_list #> list()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peyman Eshghi. Author, maintainer. Nandu Krishnan. Author. Nadia Abraham. Author. Harika Adapala. Contributor. Johnson & Johnson Innovative Medicine. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eshghi P, Krishnan N, Abraham N (2025). rAccess: R package Access Control module. R package version 0.1.1.1.","code":"@Manual{,   title = {rAccess: An R package with Access Control module},   author = {Peyman Eshghi and Nandu Krishnan and Nadia Abraham},   year = {2025},   note = {R package version 0.1.1.1}, }"},{"path":"/index.html","id":"raccess-","dir":"","previous_headings":"","what":"An R package with Access Control module","title":"An R package with Access Control module","text":"rAccess R package offers flexible framework -app access control, allowing local /remote storage, organization, retrieval access lists. features pluggable shiny module create manage access lists individual Shiny applications. built top Posit Connect Access Management, means credentials collected stored. friendly user interface enables app Admin easily manage user access permission respective access units. parameters rAccess object can either passed directly arguments new instance rAccess defined within configuration yaml file.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package with Access Control module","text":"","code":"install.packages(\"rAccess\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An R package with Access Control module","text":"rAccess includes server ui modules access management tab used within main Shiny web application.","code":"library(rAccess)"},{"path":"/index.html","id":"adding-raccess-config-file","dir":"","previous_headings":"","what":"Adding rAccess config file","title":"An R package with Access Control module","text":"package includes template configuration file, making simple users get started. contains necessary parameters rAccess can customized suit individual needs. add config file template project directory, use:","code":"rAccess::use_config(file_name = \"rAccess.yml\")"},{"path":"/index.html","id":"config-file-structure","dir":"","previous_headings":"","what":"Config file structure","title":"An R package with Access Control module","text":"detailed description config file components refer vignette : Tutorial.","code":"module: rAccess parameters:   app_name:                 # application name *   board_type:               # local/rconnect/s3 *      access_mode:              # default/single unit   unit_display:             # dropdown/switch   switch_size:              # default/mini/small/normal/large   user_df: !expr tibble::tribble(               ~userid, ~username,     \"UserID\", \"User Name\")        # Sample user_df   use_rconnect_users: TRUE        # TRUE - combine rconnect userlist with user_df   secure_mode: FALSE              # TRUE - Access will be denied to users with no access to atleast one panel/unit   local_board_path:               # Path to save local pin_board when board_type = \"local\"       s3_bucket:                      # s3 bucket name when board_type = \"s3\"         s3_access_key:                  # s3 access key when board_type = \"s3\"    s3_secret_key:                  # s3 secret key when board_type = \"s3\"    verbose: FALSE                  # If TRUE Prints all data base changes in log  data:                             # Study data path if available     datapath1:        datapath2:   panel_str:                        # Panel structure to be defined by the developer   - access_panel: ADMIN           # Every App should have an ADMIN panel.(mandatory)    - access_panel:                 # Access Panel name *     access_units:       - unit:                     # Access unit name  *       - unit:                     # Access unit name    - access_panel:                 # Access Panel name      access_units:       - unit:         data:                     # datapath associated with access unit         - unit:                              data:                     # datapath associated with access unit"},{"path":"/index.html","id":"creating-a-new-instance-of-raccess","dir":"","previous_headings":"Config file structure","what":"Creating a new instance of rAccess","title":"An R package with Access Control module","text":"configuration file ready user can create new instance rAccess :","code":"newIAM <- rAccess$new(user = \"UserID\", config = \"rAccess.yml\")"},{"path":"/index.html","id":"creating-a-new-instance-of-raccess-without-a-config-file","dir":"","previous_headings":"Config file structure","what":"Creating a new instance of rAccess without a config file","title":"An R package with Access Control module","text":"config file place, user can also pass rAccess parameters arguments new instance rAccess object.","code":"access_panels <- list(   `ADMIN` = NULL,   `Access Panel 1` = c(\"Unit 1\", \"Unit 2\"),   `Access Panel 2` = c(\"Unit 3\", \"Unit 4\"),   `Access Panel 3` = c(\"Unit 5\", \"Unit 6\") )  # User list user_df <- tibble::tribble(             ~userid, ~username,   \"UserID1\", \"User Name 1\",   \"UserID2\", \"User Name 2\")  newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"local\",                       local_board_path = \"./data/\",                       pin_name = pin_name,                       access_panels = access_panels,                       access_mode = \"default\",                       user_df = user_df)  newIAM$access_panels newIAM$access_units newIAM$access_mode"},{"path":"/index.html","id":"board_type-options-in-raccess","dir":"","previous_headings":"Config file structure","what":"board_type options in rAccess","title":"An R package with Access Control module","text":"three pin board options available users: “local”, “s3”, “rconnect”. can specified parameter board_type rAccess object. \"local\" : Local folder used pin_board. user must also specify “local_board_path”. \"s3\" : S3 bucket used pin_board. board_type “s3”, user must give s3 credentials. \"rconnect\" : Posit Connect pin_board utilized. pin_board already exist, created deployed Posit Connect server app hosted.","code":"newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"local\",                       local_board_path = \"./data/\",                       pin_name = pin_name,                       access_panels = access_panels,                       access_mode = \"default\",                       user_df = user_df) newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"s3\",                       s3_bucket: \"\"                       s3_access_key: \"\"                       s3_secret_key: \"\",                       access_panels = access_panels,                       access_mode = \"default\",                       user_df = user_df) newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"rconnect\",                       access_panels = access_panels,                       access_mode = \"default\",                       user_df = user_df)"},{"path":"/index.html","id":"creating-user-list","dir":"","previous_headings":"Config file structure","what":"Creating user list","title":"An R package with Access Control module","text":"user list rAccess either supplied user_df argument rAccess object fetched rconnect user list. Creating user_df* Using API fetch user data access organization’s user directory via API, might want first fetch data prepare user_df, similar example Using User list rconnect User list automatically fetched Posit Connect servers deployed. Users must make sure use_rconnect_users parameter set TRUE get users Posit Connect.","code":"user_df <- tibble::tribble(   ~userid, ~username,   \"UserId1\", \"User Name 1\",   \"UserId2\", \"User Name 2\",   \"UserId3\", \"User Name 3\",   \"UserId4\", \"User Name 4\",   \"UserId5\", \"User Name 5\" )  newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"local\",                       local_board_path = \"./data/\",                       access_panels = access_panels,                       access_mode = \"default\",                       user_df = user_df) api_url <- \"<user-directory-api>\" users <- jsonlite::fromJSON(api_url) user_df <- tibble::tibble(userid = users$USERID, username = users$USERNAME)  newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"local\",                       local_board_path = \"./data/\",                       access_panels = access_panels,                       access_mode = \"default\",                       user_df = user_df) # When deployed newIAM <- rAccess$new(user = \"<userid>\",                       app_name = \"testApp\",                       board_type = \"rconnect\",                       access_panels = access_panels,                       access_mode = \"default\",                       use_rconnect_users = TRUE)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R package with Access Control module","text":"","code":"library(DT) library(pins) library(shiny) library(rAccess)  ui <- navbarPage(   id = \"mainpage\",   title = \"Demo!\",   tabPanel(     \"Plot\",     sidebarLayout(       sidebarPanel(         radioButtons(           \"plotType\", \"Plot type\",           c(\"Scatter\" = \"p\", \"Line\" = \"l\")         )       ),       mainPanel(         plotOutput(\"plot\")       )     )   ),   tabPanel(     \"Summary\",     verbatimTextOutput(\"summary\")   ),   tabPanel(     \"Access Control\",     rAccess::module_iam_ui(\"iam\")   ) )  server <- function(input, output, session) {   access_panels <- list(     `ADMIN` = NULL,     `View` = c(\"view-plots\", \"view-summary\")   )   user_df <- data.frame(     userid = \"UserID\",     username = \"User Name\"   )   user_id <- ifelse(!exists(\"session$user\"), \"UserID\", session$user)      # Create new instance of rAccess   newIAM <- rAccess$new( user = user_id,                          board_type = \"local\",                          local_board_path = \"./data/\",                          app_name = \"test2\",                          access_panels = access_panels,                          access_mode = \"default\",                          switch_size = \"small\",                          unit_display = \"dropdown\",                          user_df = user_df,                          secure_mode = FALSE   )      if (newIAM$no_admin() || newIAM$is_admin()) {     showTab(\"mainpage\", target = \"Access Control\")   } else {     hideTab(\"mainpage\", target = \"Access Control\")   }      module_iam_server(\"iam\", newIAM)      # Get panels with access   user_access_list <- newIAM$get_user_accesslist()      # Show/Hide: plot tab   if (!\"view-plots\" %in% user_access_list$View) {     hideTab(\"mainpage\", target = \"Plot\")   } else {     showTab(\"mainpage\", target = \"Plot\")   }      # Show/Hide: Summary Tab   if (!\"view-summary\" %in% user_access_list$View) {     hideTab(\"mainpage\", target = \"Summary\")   } else {     showTab(\"mainpage\", target = \"Summary\")   }      output$plot <- renderPlot({     plot(cars, type = input$plotType)   })   output$summary <- renderPrint({     summary(cars)   }) }  shinyApp(ui, server)"},{"path":"/reference/get_accesshistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all access list till date — get_accesshistory","title":"Get all access list till date — get_accesshistory","text":"Get access list till date","code":""},{"path":"/reference/get_accesshistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all access list till date — get_accesshistory","text":"","code":"get_accesshistory(pin_board, pin_name)"},{"path":"/reference/get_accesshistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all access list till date — get_accesshistory","text":"pin_board Pin board pin_name Pin Name","code":""},{"path":"/reference/get_accesslist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get access list at a given date or in a specific time period — get_accesslist","title":"Get access list at a given date or in a specific time period — get_accesslist","text":"Get access list given date specific time period","code":""},{"path":"/reference/get_accesslist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get access list at a given date or in a specific time period — get_accesslist","text":"","code":"get_accesslist(pin_board, pin_name, datemin, datemax = NA)"},{"path":"/reference/get_accesslist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get access list at a given date or in a specific time period — get_accesslist","text":"pin_board Pin board pin_name pin name datemin Date \"YYYY-MM-DD\" format datemax Date, either NA \"YYYY-MM-DD\" format","code":""},{"path":"/reference/get_accesslist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get access list at a given date or in a specific time period — get_accesslist","text":"list dataframes access details","code":""},{"path":"/reference/get_admins.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the list of admins — get_admins","title":"Gets the list of admins — get_admins","text":"Gets list admins","code":""},{"path":"/reference/get_admins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the list of admins — get_admins","text":"","code":"get_admins(pin_board, pin_name, admin_panel)"},{"path":"/reference/get_admins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the list of admins — get_admins","text":"pin_board Pin board pin_name pin name admin_panel Admin panel name","code":""},{"path":"/reference/get_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather pin_board elements — get_board","title":"Gather pin_board elements — get_board","text":"Gather pin_board elements","code":""},{"path":"/reference/get_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather pin_board elements — get_board","text":"","code":"get_board(pin_board, pin_name)"},{"path":"/reference/get_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather pin_board elements — get_board","text":"pin_board pin board pin_name pin name","code":""},{"path":"/reference/get_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather pin_board elements — get_board","text":"list access_panels, access_units, access_df, access_list","code":""},{"path":"/reference/get_granted_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get access units/panels with access for a user from an existing pin board — get_granted_units","title":"Helper function to get access units/panels with access for a user from an existing pin board — get_granted_units","text":"Helper function get access units/panels access user existing pin board","code":""},{"path":"/reference/get_granted_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get access units/panels with access for a user from an existing pin board — get_granted_units","text":"","code":"get_granted_units(user_id, pin_board, pin_name)"},{"path":"/reference/get_granted_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get access units/panels with access for a user from an existing pin board — get_granted_units","text":"user_id user id pin_board pin board pin_name pin name","code":""},{"path":"/reference/get_granted_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to get access units/panels with access for a user from an existing pin board — get_granted_units","text":"vector access units","code":""},{"path":"/reference/get_user_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Get user data using API — get_user_api","title":"Get user data using API — get_user_api","text":"Get user data using API","code":""},{"path":"/reference/get_user_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get user data using API — get_user_api","text":"","code":"get_user_api(contact_info, url, api_key = NULL)"},{"path":"/reference/get_user_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get user data using API — get_user_api","text":"contact_info User entered search text url URL api_key Valid api key NULL","code":""},{"path":"/reference/get_user_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get user data using API — get_user_api","text":"tibble user id username","code":""},{"path":"/reference/module_iam_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server logic of module_iam — module_iam_server","title":"Server logic of module_iam — module_iam_server","text":"Server logic module_iam","code":""},{"path":"/reference/module_iam_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server logic of module_iam — module_iam_server","text":"","code":"module_iam_server(id, rAccess_obj)"},{"path":"/reference/module_iam_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server logic of module_iam — module_iam_server","text":"id Module's ID rAccess_obj New instance rAccess(R6 object)","code":""},{"path":"/reference/module_iam_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"User-interface definition of module_iam — module_iam_ui","title":"User-interface definition of module_iam — module_iam_ui","text":"Shiny module used main shiny web application","code":""},{"path":"/reference/module_iam_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User-interface definition of module_iam — module_iam_ui","text":"","code":"module_iam_ui(id)"},{"path":"/reference/module_iam_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User-interface definition of module_iam — module_iam_ui","text":"id User ID","code":""},{"path":"/reference/module_sub_iam_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server logic of module_sub_iam — module_sub_iam_server","title":"Server logic of module_sub_iam — module_sub_iam_server","text":"Server logic module_sub_iam","code":""},{"path":"/reference/module_sub_iam_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server logic of module_sub_iam — module_sub_iam_server","text":"","code":"module_sub_iam_server(id, access_panel_id, rAccess_obj)"},{"path":"/reference/module_sub_iam_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server logic of module_sub_iam — module_sub_iam_server","text":"id Module's ID access_panel_id Access panel ID rAccess_obj New instance rAccess(R6 object)","code":""},{"path":"/reference/module_sub_iam_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"User-interface definition of module_sub_iam — module_sub_iam_ui","title":"User-interface definition of module_sub_iam — module_sub_iam_ui","text":"Shiny module used main shiny web application","code":""},{"path":"/reference/module_sub_iam_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User-interface definition of module_sub_iam — module_sub_iam_ui","text":"","code":"module_sub_iam_ui(id)"},{"path":"/reference/module_sub_iam_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User-interface definition of module_sub_iam — module_sub_iam_ui","text":"id Module's ID","code":""},{"path":"/reference/rAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"rAccess module functions - R6 object — rAccess","title":"rAccess module functions - R6 object — rAccess","text":"rAccess class encapsulates various methods used IAM (Identity Access Management) module. provides functionalities check user permissions, verify admin status, retrieve user details, interact pin boards access control configuration.","code":""},{"path":"/reference/rAccess.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"rAccess module functions - R6 object — rAccess","text":"user User ID app_name Application Name pin_name Pin name pin_list List pins pin_board Pin board object access_panels Available access panels access_units Available access units access_mode Access mode, e.g., \"default\", \"single unit\" user_df Data frame user IDs names switch_size Size UI switch elements (e.g., \"small\", \"large\", \"default\", \"mini\", \"small\", \"normal\", \"large\") unit_display Display type access units (\"switch\", \"dropdown\") board_type Type pin board (\"local\", \"s3\", \"rconnect\") local_board_path Local path local pin boards s3_bucket S3 bucket name s3_access_key S3 access key s3_secret_key S3 secret key use_rconnect_users Boolean, use rconnect users conjunction user_df config Configuration file content data List data paths config verbose Boolean, whether print logs panel_config Complete panel structure secure_mode Boolean, enforce access requirement","code":""},{"path":"/reference/rAccess.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"rAccess module functions - R6 object — rAccess","text":"initialize(user, ...) Constructor create instance specified parameters. check_access(user_id, access_panel) Checks user access rights given panel. is_admin() Checks current user admin. no_admin() Checks admins admin panel. get_userlist_unit(access_panel, access_unit) Gets list users access specified unit. rAccessThemes() Includes custom CSS themes app. get_user_accesslist(user_id) Lists access units available user, including \"everyone\". get_superAdmins() Returns list admin user IDs.","code":""},{"path":"/reference/rAccess.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"rAccess module functions - R6 object — rAccess","text":"user User ID app_name App Name pin_name field takes argument pin_name pin_list field takes argument pin_list pin_board field takes argument pin_board access_panels field takes argument access_panels access_units field takes argument access_units access_mode Enables user select access modes.Available access modes : default - Allows access multiple access panels multiple access units, single unit - Allows access single access unit within access panel. user_df data.frame user id user name switch_size Takes values : 'default', 'mini', 'small', 'normal', 'large'. Determines size access unit switches used module. unit_display Takes values : 'switch', 'dropdown'. Determines type display access units. Defaults 'switch'. board_type Board type. Takes values \"local\", \"s3\", \"rconnect\" local_board_path Local board path. s3_bucket S3 bucket s3_access_key S3 Access Key s3_secret_key S3 Secret Key use_rconnect_users true rconnect users combined given user_df config rAccess configuration file data Lists datapaths config file verbose TRUE, prints data base updates log panel_config list entire panel structure including datapaths secure_mode TRUE, user access least one access_unit/access_panel use app.","code":""},{"path":[]},{"path":"/reference/rAccess.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"rAccess module functions - R6 object — rAccess","text":"rAccess$new() rAccess$matched_users() rAccess$check_access() rAccess$is_admin() rAccess$no_admin() rAccess$get_userlist_unit() rAccess$rAccessThemes() rAccess$get_user_accesslist() rAccess$get_superAdmins() rAccess$clone()","code":""},{"path":"/reference/rAccess.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"rAccess module functions - R6 object — rAccess","text":"Constructor initialize rAccess object","code":""},{"path":"/reference/rAccess.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$new(   user = NULL,   pin_board = NULL,   app_name = NULL,   pin_name = NULL,   access_panels,   access_units = NULL,   access_mode = \"default\",   user_df = NULL,   switch_size = NULL,   unit_display = \"switch\",   board_type = NULL,   local_board_path = NULL,   s3_bucket = NULL,   s3_access_key = NULL,   s3_secret_key = NULL,   use_rconnect_users = TRUE,   config = NULL,   verbose = FALSE,   secure_mode = FALSE )"},{"path":"/reference/rAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rAccess module functions - R6 object — rAccess","text":"user User ID pin_board Pin board app_name App name pin_name Pin name access_panels Access panels access_units Access units access_mode Access mode user_df Data Frame username userid switch_size Determines size access unit switches : default, mini, small, normal, large unit_display Determines type display access units : switch, dropdown. board_type Pin board type: local, s3, rconnect local_board_path Local path save pin_board board_type local. s3_bucket S3 bucket id s3_access_key Access key S3 bucket s3_secret_key Secret Key S3 bucket use_rconnect_users TRUE, rconnect users combined user_df deployed. config rAccess configuration file verbose TRUE, prints data base updates log secure_mode TRUE, user access least one access_unit/access_panel use app.","code":""},{"path":"/reference/rAccess.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"rAccess module functions - R6 object — rAccess","text":"pin_name, access_panels, access_units, Pin_board ...","code":""},{"path":"/reference/rAccess.html","id":"method-matched-users-","dir":"Reference","previous_headings":"","what":"Method matched_users()","title":"rAccess module functions - R6 object — rAccess","text":"Find users matching search input self$user_df","code":""},{"path":"/reference/rAccess.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$matched_users(contact_info)"},{"path":"/reference/rAccess.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"rAccess module functions - R6 object — rAccess","text":"contact_info User entered search text","code":""},{"path":"/reference/rAccess.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"rAccess module functions - R6 object — rAccess","text":"data.frame","code":""},{"path":"/reference/rAccess.html","id":"method-check-access-","dir":"Reference","previous_headings":"","what":"Method check_access()","title":"rAccess module functions - R6 object — rAccess","text":"check user access rights access unit within particular access panel. Returns access details app's access pin board matches given user_id access panel","code":""},{"path":"/reference/rAccess.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$check_access(user_id = self$user, access_panel)"},{"path":"/reference/rAccess.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"rAccess module functions - R6 object — rAccess","text":"user_id User ID access_panel Access Panel name","code":""},{"path":"/reference/rAccess.html","id":"method-is-admin-","dir":"Reference","previous_headings":"","what":"Method is_admin()","title":"rAccess module functions - R6 object — rAccess","text":"check user Admin order provide access IAM module. Returns TRUE admin user.","code":""},{"path":"/reference/rAccess.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$is_admin()"},{"path":"/reference/rAccess.html","id":"method-no-admin-","dir":"Reference","previous_headings":"","what":"Method no_admin()","title":"rAccess module functions - R6 object — rAccess","text":"check user ADMIN panel Returns FALSE one admins.","code":""},{"path":"/reference/rAccess.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$no_admin()"},{"path":"/reference/rAccess.html","id":"method-get-userlist-unit-","dir":"Reference","previous_headings":"","what":"Method get_userlist_unit()","title":"rAccess module functions - R6 object — rAccess","text":"Gets user list filtered given access unit","code":""},{"path":"/reference/rAccess.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$get_userlist_unit(access_panel, access_unit)"},{"path":"/reference/rAccess.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"rAccess module functions - R6 object — rAccess","text":"access_panel Access panel name access_unit Access unit name","code":""},{"path":"/reference/rAccess.html","id":"method-raccessthemes-","dir":"Reference","previous_headings":"","what":"Method rAccessThemes()","title":"rAccess module functions - R6 object — rAccess","text":"Function inline js/css main app’s HTML","code":""},{"path":"/reference/rAccess.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$rAccessThemes()"},{"path":"/reference/rAccess.html","id":"method-get-user-accesslist-","dir":"Reference","previous_headings":"","what":"Method get_user_accesslist()","title":"rAccess module functions - R6 object — rAccess","text":"Function get list access units given user. Note contain access units accessible everyone.","code":""},{"path":"/reference/rAccess.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$get_user_accesslist(user_id = self$user)"},{"path":"/reference/rAccess.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"rAccess module functions - R6 object — rAccess","text":"user_id User ID","code":""},{"path":"/reference/rAccess.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"rAccess module functions - R6 object — rAccess","text":"list","code":""},{"path":"/reference/rAccess.html","id":"method-get-superadmins-","dir":"Reference","previous_headings":"","what":"Method get_superAdmins()","title":"rAccess module functions - R6 object — rAccess","text":"Function get app admins","code":""},{"path":"/reference/rAccess.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$get_superAdmins()"},{"path":"/reference/rAccess.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"rAccess module functions - R6 object — rAccess","text":"ADMIN user ids","code":""},{"path":"/reference/rAccess.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"rAccess module functions - R6 object — rAccess","text":"objects class cloneable method.","code":""},{"path":"/reference/rAccess.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"rAccess module functions - R6 object — rAccess","text":"","code":"rAccess$clone(deep = FALSE)"},{"path":"/reference/rAccess.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"rAccess module functions - R6 object — rAccess","text":"deep Whether make deep clone.","code":""},{"path":"/reference/rconnect_pin_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create rconnect pinboard — rconnect_pin_board","title":"Function to create rconnect pinboard — rconnect_pin_board","text":"Function create rconnect pinboard","code":""},{"path":"/reference/rconnect_pin_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create rconnect pinboard — rconnect_pin_board","text":"","code":"rconnect_pin_board(server, key)"},{"path":"/reference/rconnect_pin_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create rconnect pinboard — rconnect_pin_board","text":"server rconnect server key API KEY connect rconnect servers","code":""},{"path":"/reference/rconnect_pin_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create rconnect pinboard — rconnect_pin_board","text":"pin_board","code":""},{"path":"/reference/s3_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Set environmental variables to connect to AWS S3 bucket — s3_config","title":"Set environmental variables to connect to AWS S3 bucket — s3_config","text":"Set environmental variables connect AWS S3 bucket","code":""},{"path":"/reference/s3_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set environmental variables to connect to AWS S3 bucket — s3_config","text":"","code":"s3_config(access_key, secret_key, region = \"us-east-1\")"},{"path":"/reference/s3_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set environmental variables to connect to AWS S3 bucket — s3_config","text":"access_key Character. AWS access key. secret_key Character. AWS secret key. region Character. AWS region. Defaults \"us-east-1\".","code":""},{"path":"/reference/s3_pinboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create s3 pin_board — s3_pinboard","title":"Function to create s3 pin_board — s3_pinboard","text":"Function create s3 pin_board","code":""},{"path":"/reference/s3_pinboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create s3 pin_board — s3_pinboard","text":"","code":"s3_pinboard(   s3_bucket,   s3_access_key,   s3_secret_key,   s3_region = \"us-east-1\",   s3_prefix )"},{"path":"/reference/s3_pinboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create s3 pin_board — s3_pinboard","text":"s3_bucket s3 bucket name s3_access_key access key connect s3 bucket s3_secret_key secret key connect s3 bucket s3_region s3 bucket region s3_prefix Prefix ","code":""},{"path":"/reference/s3_pinboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create s3 pin_board — s3_pinboard","text":"s3 pin board","code":""},{"path":"/reference/use_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add rAccess configuration file to the given directory — use_config","title":"Function to add rAccess configuration file to the given directory — use_config","text":"Copies configuration file (.yml) package's config directory specified path.","code":""},{"path":"/reference/use_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add rAccess configuration file to the given directory — use_config","text":"","code":"use_config(file_name = \"rAccess.yml\", path = getwd())"},{"path":"/reference/use_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add rAccess configuration file to the given directory — use_config","text":"file_name Config file name .yml extension path Directory config file added","code":""}]
